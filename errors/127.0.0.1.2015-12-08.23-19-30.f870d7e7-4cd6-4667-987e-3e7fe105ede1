(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> <bound method Set.count of <Set (LOWER(posts.title) LIKE '%test%' ESCAPE '\\')>> is not JSON serializable"
p3
sS'layer'
p4
S'C:\\Users\\Taoh\\Desktop\\git\\Project-cmps183\\web2py\\applications\\cmps183_project\\controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\ndef pinterest_test():\n    return dict()\n\ndef deleteposts():\n    db(db.posts.id > 0).delete()\n    db(db.uploads.id > 0).delete()\n\ndef deletereviews():\n    db(db.reviews.id>0).delete()\n\ndef map():\n    return dict(postlist = [])\n\ndef index():\n    return dict(board_list = [])\n\ndef show_boards():\n    return dict()\n\n\ndef search_results():\n    search_text = request.body.read()\n    if(search_text == "keyword="):\n        session.flash = T(\'Please enter a post title.\')\n        redirect(\'search_results\')\n\n    def cutit(string, n):\n        return string[n:]\n\n    search_text = cutit(search_text, 8)\n\n    if (search_text != ""):\n        search_text = search_text.replace("+", " ")\n\n    post_list = db(db.posts.title.contains(search_text)).select()\n\n    for post in post_list:\n        # update the average review\n        count = db(db.reviews.post == post.id).count()\n        if count == 0:\n            break\n\n        reviews = db(db.reviews.post == post.id).select()\n        total = 0\n\n        for i in reviews:\n            total += i.num_stars\n        dub = float(\'%.2f\' % (total / float(count)))\n        db.posts(post.id).update_record(avg_rate=dub)\n\n    post_list = db(db.posts.title.contains(search_text)).select()\n    return dict(post_list=post_list, search_text=search_text)\n\n\n\ndef load_search_results():\n    search_text = request.args(0)\n    if search_text is None:\n        return response.json(dict(post_list=[], star_dict={}, anti_star_dict={},\n                                  half_star_dict={}))\n\n    search_text = search_text.replace("_", " ")\n    print search_text\n\n    posts = db(db.posts.title.contains(search_text)).select()\n    count = db(db.posts.title.contains(search_text)).count\n\n    star_dict = {}\n    anti_star_dict = {}\n    half_star_dict = {}\n\n    for post in posts:\n        if (post.avg_rate - int(post.avg_rate)) >= 0.5:\n            half_star_dict[post.id] = True\n            anti_star_dict[post.id] = range(0, int(4 - int(post.avg_rate)))\n        else:\n            anti_star_dict[post.id] = range(0, int(5 - int(post.avg_rate)))\n            half_star_dict[post.id] = False\n\n        star_dict[post.id] = range(0, int(post.avg_rate))\n\n    return response.json(dict(post_list=posts.as_list(), star_dict=star_dict, anti_star_dict=anti_star_dict,\n                                  half_star_dict=half_star_dict, count=count))\n\n# search posts\ndef post_selector():\n    if not request.vars.keyword: return \'\'\n\n    post_title = []\n    rows = db(db.posts).select()\n    for row in rows:\n       post_title.append(str(row.title))\n\n    print post_title\n\n    #query = db.posts.title.contains(request.vars.keyword)\n    #posts = db(query).select(orderby=db.posts.title)\n    post_start = request.vars.keyword.lower()\n    selected = [m for m in post_title if (post_start) in m.lower()]\n    return DIV(*[DIV(k,\n                     _onclick="jQuery(\'#keyword\').val(\'%s\')" % k,\n                     _onmouseover="this.style.backgroundColor=\'rgba(221, 221, 244, 0.71)\',"\n                                  "this.style.cursor=\'pointer\'",\n                     _onmouseout="this.style.backgroundColor=\'white\'",\n                     ) for k in selected],\n               _class="search_list"\n               )\n\n\ndef load_posts_rating():\n    post_category = request.args(0)\n    # print post_board_id\n    posts = db(db.posts.category == post_category).select(orderby=~db.posts.avg_rate)\n\n    star_dict = {}\n    anti_star_dict = {}\n    half_star_dict = {}\n\n    for post in posts:\n        if (post.avg_rate - int(post.avg_rate)) >= 0.5:\n            half_star_dict[post.id] = True\n            anti_star_dict[post.id] = range(0, int(4 - int(post.avg_rate)))\n        else:\n            anti_star_dict[post.id] = range(0, int(5 - int(post.avg_rate)))\n            half_star_dict[post.id] = False\n\n        star_dict[post.id] = range(0, int(post.avg_rate))\n\n    return response.json(dict(post_list=posts.as_list(), star_dict=star_dict, anti_star_dict=anti_star_dict, half_star_dict=half_star_dict))\n\ndef load_posts_recent():\n    category = request.args(0)\n    # print post_board_id\n    posts = db(db.posts.category == category).select(orderby=~db.posts.created_on)\n\n    star_dict = {}\n    anti_star_dict = {}\n    half_star_dict = {}\n\n    for post in posts:\n        if (post.avg_rate - int(post.avg_rate)) >= 0.5:\n            half_star_dict[post.id] = True\n            anti_star_dict[post.id] = range(0, int(4 - int(post.avg_rate)))\n        else:\n            anti_star_dict[post.id] = range(0, int(5 - int(post.avg_rate)))\n            half_star_dict[post.id] = False\n\n        star_dict[post.id] = range(0, int(post.avg_rate))\n\n\n    return response.json(dict(post_list=posts.as_list(), star_dict=star_dict, anti_star_dict=anti_star_dict, half_star_dict=half_star_dict))\n\ndef show_posts():\n    post_category = request.args(0)\n\n    post_list = db(db.posts.category == post_category).select()\n\n    for post in post_list:\n        # update the average review\n        count = db(db.reviews.post == post.id).count()\n        if count == 0:\n            break\n\n        reviews = db(db.reviews.post == post.id).select()\n        total = 0\n\n        for i in reviews:\n            total += i.num_stars\n        dub = float(\'%.2f\' % (total / float(count)))\n        db.posts(post.id).update_record(avg_rate=dub)\n\n    post_list = db(db.posts.category == post_category).select(orderby=~db.posts.avg_rate)\n    return dict(post_list=post_list, post_category=post_category)\n\n@auth.requires_login()\ndef add_posts():\n    logger.info("My session is: %r" % session)\n    form = SQLFORM(db.posts)\n\n    category = request.args(0)\n\n    form.vars.category = category\n    form.vars.user_id = auth.user_id\n\n    if form.process().accepted:\n        session.flash = T(\'the data was inserted\')\n        redirect(URL(\'default\',\'show_posts\', args=[category])) #might change to index\n    return dict(form=form)\n\n@auth.requires_login()\ndef posts_edit():\n    posts = db.posts(request.args(0))\n    if(auth.user_id != posts.user_id):\n         redirect(URL(\'default\', \'show_posts\', args=[posts.category]))\n         session.flash = T(\'Not permitted for this user\')\n    else:\n        form = SQLFORM(db.posts, record=posts, upload = URL(\'download\'))\n        if form.process().accepted:\n            session.flash = T(\'The data was edited\')\n            redirect(URL(\'default\', \'show_posts\', args=[posts.category]))\n        return dict(form=form)\n\n#delete post\n@auth.requires_login()\ndef delete_post():\n    post = db.posts(request.args(0))\n    if (auth.user_id != post.user_id):\n        redirect(URL(\'default\', \'show_posts\', args=request.args(1)))\n        session.flash = T(\'Not permitted for this user\')\n    else:\n        db(db.uploads.post == post).delete()\n        db(db.posts.id == post).delete()\n        redirect(URL(\'default\',\'show_posts\', args=request.args(1)))\n\n\ndef post_page():\n    post_id = request.args(0)\n    board = db.posts(post_id).category\n    post = db.posts[post_id]\n    title = post.title\n    body = post.body\n    reviews = db(db.reviews.post == post_id).select()\n    num_rev = db(db.reviews.post == post_id).count()\n    # print "numrev" + str(num_rev)\n\n    images = db(db.uploads.post == post_id).select()\n    return dict(post = post, reviews=reviews, num_rev=num_rev, title=title, body= body, images = images, board=board)\n\n# upload images\ndef upload_images():\n    import datetime\n    form = FORM(LABEL("File(s):"), INPUT(_name=\'up_files\', _type=\'file\', _multiple=\'\', requires=IS_NOT_EMPTY()),  BR(),INPUT(_type=\'submit\'))\n    if form.accepts(request.vars, formname="form"):\n        files = request.vars[\'up_files\']\n        if not isinstance(files, list):\n            files = [files]\n        for f in files:\n            print f.filename\n            up_file = db.uploads.up_file.store(f, f.filename)\n            i = db.uploads.insert(notes=request.vars.notes, up_file=up_file, filename=f.filename, post = request.args(0), up_date= datetime.datetime.now())\n            db.commit()\n        redirect(URL(\'post_page\',args=request.args(0)))\n    return dict(form=form)\n\n@auth.requires_login()\ndef add_review():\n    form = SQLFORM(db.reviews)\n    form.vars.post = request.args(0)\n    form.vars.user_id = auth.user_id\n    if form.process().accepted:\n        session.flash = T(\'the data was inserted\')\n        redirect(URL(\'default\',\'post_page\', args=request.args(0)))\n    return dict(form=form)\n\n\ndef load_reviews():\n    post_board_id = request.args(0)\n    rows = db(db.reviews.post == post_board_id).select()\n\n    def get_name(user_id):\n        test = db(db.auth_user.id == user_id).select()\n        firstname = ""\n        lastname = ""\n        for i in test:\n            firstname = i.first_name\n            lastname =  i.last_name\n        return firstname + " " + lastname\n\n    d = {r.id: {\'body\': r.body,\n                \'user_id\': r.user_id,\n                \'user\': get_name(r.user_id),\n                \'num_stars\':r.num_stars,\n                \'star_list\': range(0,r.num_stars),\n                \'anti_star_list\': range(0, 5-r.num_stars),\n                \'post_id\':r.post\n                }\n\n         for r in rows}\n    return response.json(dict(review_dict=d))\n\n@auth.requires_login()\ndef delete_review():\n    rev_id = request.vars.get("rev_id")\n    db(db.reviews.id == rev_id).delete()\n    redirect(URL(\'default\', \'post_page\', args= request.vars.get("post")))\n\n\n@auth.requires_login()\ndef edit_review():\n    rev_id = request.args(0)\n    post_id = request.args(1)\n    user_id = request.args(2)\n\n\n    if int(auth.user_id) != int(user_id):\n        session.flash = T(\'Not permitted for this user\')\n        redirect(URL(\'default\', \'post_page\', args=[post_id]))\n\n    form = SQLFORM(db.reviews, record=rev_id)\n\n    if form.process().accepted:\n        session.flash = T(\'The data was edited\')\n        redirect(URL(\'default\', \'post_page\', args=[post_id]))\n    return dict(form=form)\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n\n\nresponse._vars=response._caller(load_search_results)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "C:\\Users\\Taoh\\Desktop\\git\\Project-cmps183\\web2py\\gluon\\restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "C:\\Users\\Taoh\\Desktop\\git\\Project-cmps183\\web2py\\applications\\cmps183_project\\controllers/default.py", line 357, in <module>\n  File "C:\\Users\\Taoh\\Desktop\\git\\Project-cmps183\\web2py\\gluon\\globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "C:\\Users\\Taoh\\Desktop\\git\\Project-cmps183\\web2py\\applications\\cmps183_project\\controllers/default.py", line 93, in load_search_results\n    half_star_dict=half_star_dict, count=count))\n  File "C:\\Users\\Taoh\\Desktop\\git\\Project-cmps183\\web2py\\gluon\\globals.py", line 656, in json\n    return json(data, default=default or custom_json)\n  File "C:\\Users\\Taoh\\Desktop\\git\\Project-cmps183\\web2py\\gluon\\serializers.py", line 137, in json\n    value = json_parser.dumps(value, default=default)\n  File "C:\\Python27\\lib\\json\\__init__.py", line 250, in dumps\n    sort_keys=sort_keys, **kw).encode(obj)\n  File "C:\\Python27\\lib\\json\\encoder.py", line 207, in encode\n    chunks = self.iterencode(o, _one_shot=True)\n  File "C:\\Python27\\lib\\json\\encoder.py", line 270, in iterencode\n    return _iterencode(o, 0)\n  File "C:\\Users\\Taoh\\Desktop\\git\\Project-cmps183\\web2py\\gluon\\serializers.py", line 110, in custom_json\n    raise TypeError(repr(o) + " is not JSON serializable")\nTypeError: <bound method Set.count of <Set (LOWER(posts.title) LIKE \'%test%\' ESCAPE \'\\\')>> is not JSON serializable\n'
p11
s.