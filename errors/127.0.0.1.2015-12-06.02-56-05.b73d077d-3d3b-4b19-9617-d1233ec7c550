(dp1
S'output'
p2
S"<type 'exceptions.UnboundLocalError'> local variable 'post_list' referenced before assignment"
p3
sS'layer'
p4
S'C:\\Users\\Taoh\\Desktop\\git\\Project-cmps183\\web2py\\applications\\cmps183_project\\controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\ndef deleteboards():\n    db(db.board.id > 0).delete()\n\ndef deleteposts():\n    db(db.posts.id > 0).delete()\n\ndef deletereviews():\n    db(db.reviews.id>0).delete()\n\ndef map():\n    return dict(postlist = [])\n\ndef index():\n    redirect(URL(\'show_boards\'))\n    return dict(board_list = [])\n\ndef show_boards():\n    board_list = db(db.board).select()\n\n    # Code for search bar\n    form = FORM(INPUT(_id=\'keyword\', _name=\'keyword\', _onkeyup="ajax(\'callback\', [\'keyword\'], \'target\');"))\n    target_div = DIV(_id=\'target\')\n\n    return dict(board_list=board_list, form=form, target_div=target_div)\n\ndef callback():\n     "an ajax callback that returns a <ul> of links to post pages"\n     query = db.posts.title.contains(request.vars.keyword)\n     posts = db(query).select(orderby=db.posts.title)\n     links = [(A(p.title, _href=URL(\'post_page\',args=p.id)))\n              for p in posts]\n     return UL(*links, _class=\'search_list\')\n\n@auth.requires_login()\ndef add_board():\n    logger.info("My session is: %r" % session)\n    form = SQLFORM(db.board)\n    if form.process().accepted:\n        session.flash = T(\'the data was inserted\')\n        redirect(URL(\'show_boards\')) #might change to index\n    return dict(form=form)\n\ndef show_posts():\n    post_board_id = request.args(0)\n\n    post_list_ordered = db(db.posts.board==post_board_id).select()\n\n\n    # avglist = {}\n    #\n    # for post in post_list:\n    #     reviews = db(db.reviews.post == post.id).select()\n    #     total = 0\n    #     count = db(db.reviews.post == post.id).count()\n    #     for i in reviews:\n    #         total += i.num_stars\n    #     avglist[post.id] = float(\'%.2f\'%(total / float(count)))\n\n    for post in post_list:\n        reviews = db(db.reviews.post == post.id).select()\n        total = 0\n        count = db(db.reviews.post == post.id).count()\n        if count == 0:\n            break\n        for i in reviews:\n            total += i.num_stars\n        post.avg_rate = float(\'%.2f\' % (total / float(count)))\n\n    post_list = db(db.posts.board == post_board_id).select()\n\n\n    return dict(post_list=post_list, post_board_id=post_board_id)\n\ndef add_posts():\n    logger.info("My session is: %r" % session)\n    form = SQLFORM(db.posts,  upload = URL(\'download\'))\n\n    form.vars.board = request.args(0)\n    form.vars.user_id = auth.user_id\n\n    if form.process().accepted:\n        session.flash = T(\'the data was inserted\')\n        redirect(URL(\'default\',\'show_posts\', args=request.args(0))) #might change to index\n    return dict(form=form)\n\ndef posts_edit():\n\n    posts = db.posts(request.args(0))\n    if(auth.user_id != posts.user_id):\n         redirect(URL(\'default\', \'show_posts\', args=[posts.board]))\n         session.flass = T(\'Not permitted for this user\')\n    else:\n        form = SQLFORM(db.posts, record=posts, upload = URL(\'download\'))\n        if form.process().accepted:\n            session.flash = T(\'The data was edited\')\n            redirect(URL(\'default\', \'show_posts\', args=[posts.board]))\n        return dict(form=form)\n\n#delete boards\ndef delete_post():\n\n    post_id = request.args(0)\n    db(db.posts.id == post_id).delete()\n    redirect(URL(\'default\',\'show_posts\', args=request.args(1)))\n\n\ndef post_page():\n    post_id = request.args(0)\n    post = db.posts[post_id]\n    title = post.title\n    body = post.body\n    reviews = db(db.reviews.post == post_id).select()\n    num_rev = db(db.reviews.post == post_id).count()\n    # print "numrev" + str(num_rev)\n\n    images = db(db.uploads.post == post_id).select()\n    return dict(post = post,reviews=reviews, num_rev=num_rev, title=title, body= body, images = images)\n\n# upload images\ndef upload_images():\n    import datetime\n    form = FORM(LABEL("File(s):"), INPUT(_name=\'up_files\', _type=\'file\', _multiple=\'\', requires=IS_NOT_EMPTY()),  BR(),INPUT(_type=\'submit\'))\n    if form.accepts(request.vars, formname="form"):\n        files = request.vars[\'up_files\']\n        if not isinstance(files, list):\n            files = [files]\n        for f in files:\n            print f.filename\n            up_file = db.uploads.up_file.store(f, f.filename)\n            i = db.uploads.insert(notes=request.vars.notes, up_file=up_file, filename=f.filename, post = request.args(0), up_date= datetime.datetime.now())\n            db.commit()\n        redirect(URL(\'post_page\',args=request.args(0)))\n    return dict(form=form)\n\n@auth.requires_login()\ndef add_review():\n    form = SQLFORM(db.reviews)\n    form.vars.post = request.args(0)\n    form.vars.user_id = auth.user_id\n    if form.process().accepted:\n        session.flash = T(\'the data was inserted\')\n        redirect(URL(\'default\',\'post_page\', args=request.args(0)))\n    return dict(form=form)\n\n\ndef load_reviews():\n    post_board_id = request.args(0)\n    rows = db(db.reviews.post == post_board_id).select()\n\n\n\n    def get_name(user_id):\n        test = db(db.auth_user.id == user_id).select()\n        firstname = ""\n        lastname = ""\n        for i in test:\n            firstname = i.first_name\n            lastname =  i.last_name\n        return firstname + " " + lastname\n\n    d = {r.id: {\'body\': r.body,\n                \'user_id\': r.user_id,\n                \'user\': get_name(r.user_id),\n                \'num_stars\':r.num_stars,\n                \'star_list\': range(0,r.num_stars),\n                \'anti_star_list\': range(0, 5-r.num_stars),\n                \'post_id\':r.post\n                }\n\n         for r in rows}\n    return response.json(dict(review_dict=d))\n\ndef delete_review():\n    rev_id = request.vars.get("rev_id")\n    print "rev"\n    print rev_id\n    db(db.reviews.id == rev_id).delete()\n    redirect(URL(\'default\', \'post_page\', args= request.vars.get("post")))\n\n# def edit_review():\n#     rev_id = request.vars.get("rev_id")\n#     if(auth.user_id != request.vars.get("user_id")):\n#          redirect(URL(\'default\', \'post_page\', args=request.vars.get("post")))\n#          print "hi"\n#          session.flash = T(\'Not permitted for this user\')\n#     else:\n#         form = SQLFORM(db.rev_id, record=rev_id, upload = URL(\'download\'))\n#         if form.process().accepted:\n#             session.flash = T(\'The data was edited\')\n#             redirect(URL(\'default\', \'edit_review\', args=request.vars.get("post")))\n#         edit_button = A(\'View\', _class=\'btn btn-warning\',\n#             _href=URL(\'default\', \'post_page\', args=[request.vars.get("post")]))\n#         return dict(form=form,edit_button=edit_button)\n\ndef edit_review():\n    rev_id = request.args(0)\n    post_id = request.args(1)\n    user_id = request.args(2)\n\n\n    if int(auth.user_id) != int(user_id):\n        session.flash = T(\'Not permitted for this user\')\n        redirect(URL(\'default\', \'post_page\', args=[post_id]))\n\n    form = SQLFORM(db.reviews, record=rev_id)\n\n    if form.process().accepted:\n        session.flash = T(\'The data was edited\')\n        redirect(URL(\'default\', \'post_page\', args=[post_id]))\n    return dict(form=form)\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n\nresponse._vars=response._caller(show_posts)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "C:\\Users\\Taoh\\Desktop\\git\\Project-cmps183\\web2py\\gluon\\restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "C:\\Users\\Taoh\\Desktop\\git\\Project-cmps183\\web2py\\applications\\cmps183_project\\controllers/default.py", line 262, in <module>\n  File "C:\\Users\\Taoh\\Desktop\\git\\Project-cmps183\\web2py\\gluon\\globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "C:\\Users\\Taoh\\Desktop\\git\\Project-cmps183\\web2py\\applications\\cmps183_project\\controllers/default.py", line 69, in show_posts\n    for post in post_list:\nUnboundLocalError: local variable \'post_list\' referenced before assignment\n'
p11
s.