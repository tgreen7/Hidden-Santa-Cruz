(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> "
p3
sS'layer'
p4
S'C:\\Users\\bryce\\Desktop\\web2py\\applications\\HiddenSC\\controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    logger.info("Here we are, in the controller.")\n    db.people.name.label = "What\'s your name?"\n    logger.info("Session: %r" % session)\n    row = db(db.people.user_id == auth.user_id).select().first()\n    db.people.user_id.readable = db.people.user_id.writable = False\n    form = SQLFORM(db.people, record=row)\n    # board_list = [\n    #     {\'title\': \'board1\',},d\n    #     {\'title\': \'board2\',}\n    # ]\n    # return dict(board_list = board_list)\n    redirect(URL(\'show_boards\'))\n    return dict(board_list = [])\n\n\n\n\n\n\n@auth.requires_login()\ndef add_board():\n    logger.info("My session is: %r" % session)\n    form = SQLFORM(db.board)\n    if form.process().accepted:\n        session.flash = T(\'the data was inserted\')\n        redirect(URL(\'show_boards\')) #might change to index\n    return dict(form=form)\n\n\ndef show_boards():\n\n    board_list = db(db.board).select()\n    return dict(board_list=board_list)\n\n#delete boards\ndef delete_post():\n\n    post_id = request.args(0)\n    db(db.posts.id == post_id).delete()\n    redirect(URL(\'default\',\'show_posts\', args=request.args(1)))\n\ndef deleteboards():\n    db(db.board.id > 0).delete()\n\n\n\n\n\n\ndef deleteposts():\n    db(db.posts.id > 0).delete()\n\n\ndef load_reviews():\n    post_board_id = request.args(0)\n    rows = db(db.reviews.post == post_board_id).select()\n    d = {r.message_id: {\'body\': r.body,\n                        \'id\': r.id}\n\n         for r in rows}\n    print "d"\n    print d\n    return response.json(dict(msg_dict=d))\n\ndef post_page():\n    post_id = request.args(0)\n    # print post_id\n    post = db.posts[post_id]\n    reviews = db(db.reviews.post == post_id).select()\n    print "reviews"\n    print reviews\n    return dict(post = post,reviews=reviews)\n\ndef show_posts():\n    post_board_id = request.args(0)\n    board_list =db(db.board).select()\n    print "fuck"\n    print post_board_id\n    print "fuck again"\n    post_list = db(db.posts.board==post_board_id).select()\n    return dict(post_list=post_list, post_board_id=post_board_id, board_list=board_list)\n\n\n\n# def submit():\n#     import datetime\n#\n#     form = FORM(LABEL("File(s):"),\n#                 INPUT(_name=\'up_files\', _type=\'file\', _multiple=\'\', requires=IS_NOT_EMPTY()),  BR(),INPUT(_type=\'submit\'))\n#     if form.accepts(request.vars, formname="form"):\n#         files = request.vars[\'up_files\']\n#         if not isinstance(files, list):\n#             files = [files]\n#         for f in files:\n#             print f.filename\n#             up_file = db.uploads.up_file.store(f, f.filename)\n#             i = db.uploads.insert(up_file=up_file)\n#             db.commit()\n#         return "form submitted" #redirect(URL(\'data\', \'index\')\n#         # )\n#     return dict(form=form)\n\ndef add_posts():\n    logger.info("My session is: %r" % session)\n    form = SQLFORM(db.posts,  upload = URL(\'download\'))\n\n    form.vars.board = request.args(0)\n    form.vars.user_id = auth.user_id\n\n    if form.process().accepted:\n        session.flash = T(\'the data was inserted\')\n        redirect(URL(\'default\',\'show_posts\', args=request.args(0))) #might change to index\n    return dict(form=form)\n\n\n@auth.requires_login()\ndef add_review():\n    form = SQLFORM(db.reviews)\n    form.vars.post = request.args(0)\n    print "review_post id"\n    print form.vars.post\n    form.vars.user_id = auth.user_id\n    if form.process().accepted:\n        session.flash = T(\'the data was inserted\')\n        redirect(URL(\'default\',\'post_page\', args=request.args(0)))\n    return dict(form=form)\n\ndef posts_details():\n    posts = db.posts(request.args)\n    if posts is None:\n        session.flash = T(\'No such post\')\n        redirect(URL(\'default\', \'show_posts\'))\n    form = SQLFORM(db.posts, record=posts, readonly=True)\n    edit_button = A(\'Edit\', _class=\'btn btn-warning\',\n                    _href=URL(\'default\', \'posts_edit\', args=[posts.id]))\n    list_button = A(\'View all\', _class=\'btn btn-info\',\n                    _href=URL(\'default\', \'show_posts\'))\n    return dict(form=form, edit_button=edit_button,\n                list_button=list_button)\ndef posts_edit():\n\n    posts = db.posts(request.args(0))\n    if(auth.user_id != posts.user_id_2):\n         redirect(URL(\'default\', \'show_posts\', args=[posts.board]))\n         session.flass = T(\'Not permitted for this user\')\n    else:\n        form = SQLFORM(db.posts, record=posts, upload = URL(\'download\'))\n        if form.process().accepted:\n            session.flash = T(\'The data was edited\')\n            redirect(URL(\'default\', \'show_posts\', args=[posts.board]))\n        edit_button = A(\'View\', _class=\'btn btn-warning\',\n             _href=URL(\'default\', \'show_posts\', args=[posts.id]))\n        return dict(form=form, edit_button=edit_button)\n\n\n\ndef posts():\n    # board_id = request.args(0)\n    # try:\n    #     bid = int(board_id)\n    # except Exception, e:\n    #     session.message = T(\'Bad URL\')\n    #     redirect(URL(\'default\', \'index\'))\n    # b = board_id.get(bid)\n    # if b is None:\n    #     session.message = T(\'no such board\')\n    #     redirect(URL(\'default\', \'index\'))\n    # session.pasta_sauce = "Pesto" #not used\n    return dict(post_list = [])\n\n\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n\nresponse._vars=response._caller(load_reviews)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "C:\\Users\\bryce\\Desktop\\web2py\\gluon\\restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "C:\\Users\\bryce\\Desktop\\web2py\\applications\\HiddenSC\\controllers/default.py", line 231, in <module>\n  File "C:\\Users\\bryce\\Desktop\\web2py\\gluon\\globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "C:\\Users\\bryce\\Desktop\\web2py\\applications\\HiddenSC\\controllers/default.py", line 78, in load_reviews\n    for r in rows}\n  File "C:\\Users\\bryce\\Desktop\\web2py\\applications\\HiddenSC\\controllers/default.py", line 78, in <dictcomp>\n    for r in rows}\n  File "C:\\Users\\bryce\\Desktop\\web2py\\gluon\\packages\\dal\\pydal\\objects.py", line 90, in __getattr__\n    raise AttributeError\nAttributeError\n'
p11
s.